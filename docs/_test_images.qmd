



```{python}
%load_ext autoreload
%autoreload 2
%matplotlib inline
%config InlineBackend.print_figure_kwargs = {"bbox_inches": None, "facecolor": "w"}
```

```{python}
import matplotlib as mpl
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns

from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.gaussian_process.kernels import RBF, ConstantKernel as C

from emulate import convert_from_r_to_ho_basis
from emulate import leggauss_shifted
from emulate import ho_energy, ho_radial_wf
from emulate import setup_rc_params
from emulate import EigenEmulator, NCSMEmulator, BoundStateOperator

from os.path import join

setup_rc_params(interactive=True, constrained_layout=False)
# sns.set_palette('colorblind')
sns.set_palette("pastel")
```



```{python}
def wave_function(x):
    return np.sinc(x) * np.sqrt(x)

def matrix_high_fidelity(x, xp):
    scale = 5
    M = np.exp(-(x**2 + xp**2)**2/scale**4) + np.exp(-(x - xp)**2/2)
    M /= x + 5
    return M
```


```{python}
x = np.linspace(0, 10, 401)
H = matrix_high_fidelity(x[:, None], x)
psi = wave_function(x)

linewidth = 0.8
basis_colors = ["C0", "C3", "C2"]
save_path = "test_fig"
```

```{python}
fig, ax = plt.subplots(figsize=(1, 1), frameon=False)
ax.matshow(H, cmap=mpl.cm.Spectral_r)
ax.axis("off")
fig.tight_layout(pad=0.1, h_pad=0, w_pad=0)
fig.savefig(join(save_path, "highfidelity"))
```

```{python}
fig, ax = plt.subplots(figsize=(0.2, 1), frameon=False)

ax.plot(psi[::-1], x, c="k", lw=linewidth, clip_on=False)
ax.axis("off")
ax.set_xticks([])
ax.set_yticks([])
ax.margins(0.1, 0.01)
fig.tight_layout(pad=0)
fig.savefig(join(save_path, "wave_function"))
```



```{python}
fig, ax = plt.subplots(figsize=(0.3, 1), frameon=False)

offset = np.max(psi) + 0.1
ax.plot(psi[::-1], x, lw=linewidth, c=basis_colors[0])
ax.plot(psi[::-1] + offset, x, lw=linewidth, c=basis_colors[1])
ax.plot(psi[::-1] + 2 * offset, x, lw=linewidth, c=basis_colors[2])
ax.axis("off")
ax.margins(0.02, 0.01)
fig.tight_layout(pad=0)
fig.savefig(join(save_path, "basis"))
```


```{python}
fig, ax = plt.subplots(figsize=(0.8, 0.4), frameon=False)

offset = np.max(psi) + 0.1
ax.plot(x, psi, lw=linewidth, clip_on=False, c=basis_colors[0])
ax.plot(x, psi - offset, lw=linewidth, clip_on=False, c=basis_colors[1])
ax.plot(x, psi - 2 * offset, lw=linewidth, clip_on=False, c=basis_colors[2])
ax.axis("off")
ax.margins(0.01, 0.1)
fig.tight_layout(pad=0)
fig.savefig(join(save_path, "basis_t"))
```


```{python}
fig, ax = plt.subplots(figsize=(0.4, 0.4), frameon=False)

x_pts = 3 * [0, 1, 2]
y_pts = 3 * [0] + 3 * [-1] + 3 * [-2]
# y_pts *= -1
# proj_colors = ["C0", "C4", "C9", "C4", "C1", "C3", "C9", "C3", "C2"]
# proj_colors = ["C0", "C4", "C9", "C4", "C3", "C1", "C9", "C1", "C2"]
# yellow = "#CCCC00"
# yellow = "#FEDD00"
yellow = "#ffe36e"
# yellow = "#f8df75"
proj_colors = ["C0", "C4", "C9", "C4", "C3", yellow, "C9", yellow, "C2"]
# proj_colors = ["C0", "C4", "C9", "C4", "C3", "C8", "C9", "C8", "C2"]

for i in range(len(x_pts)):
    ax.plot(x_pts[i], y_pts[i], ls="", marker="s", c=proj_colors[i], markersize=7, clip_on=False)
ax.set_xticks([])
ax.set_yticks([])
ax.axis("off")
ax.margins(0.09, 0.09)
fig.tight_layout(pad=0)
fig.savefig(join(save_path, "projected_matrix"))
```

```{python}
fig, ax = plt.subplots(figsize=(0.1, 0.4), frameon=False)

for i in range(3):
    ax.plot([0], -i, ls="", marker=['o', 'D', 'v'][i], c=basis_colors[i], markersize=4, clip_on=False)
ax.set_xticks([])
ax.set_yticks([])
ax.axis("off")
ax.margins(0.01, 0.1)
fig.tight_layout(pad=0)
fig.savefig(join(save_path, "coefficients"))
```



```{python}
import matplotlib.patheffects as mpe

fig, ax = plt.subplots(figsize=(0.7, 0.12), frameon=False)

ax.plot([0, 1], [0, 0], lw=7, solid_capstyle='round',
    path_effects=[mpe.withStroke(linewidth=8, foreground="0.1")]
)
ax.set_xticks([])
ax.set_yticks([])
ax.axis("off")
ax.margins(0.1, 0.05)
fig.tight_layout(pad=0)
fig.savefig(join(save_path, "time_long"))
```


```{python}
from matplotlib.patches import Rectangle, FancyBboxPatch
from matplotlib.collections import PatchCollection

fig, ax = plt.subplots(figsize=(0.6, 0.12), frameon=False)


boxes = [FancyBboxPatch((2*i, 0), 1, 1, boxstyle="Round, pad=0.1")
                  for i in range(8)]

# Create patch collection with specified colour/alpha
pc = PatchCollection(boxes, facecolor="C0", lw=0.4,
                    edgecolor="0.1")

# Add collection to axes
ax.add_collection(pc)


ax.set_xticks([])
ax.set_yticks([])
ax.axis("off")
ax.margins(0.012, 0.05)
fig.tight_layout(pad=0)
fig.savefig(join(save_path, "time_short"))
```


```{python}
import matplotlib.patheffects as mpe

fig, ax = plt.subplots(figsize=(0.1, 0.12), frameon=False)

# ax.plot([0, 1], [0, 0], lw=7, solid_capstyle='round',
#     path_effects=[mpe.withStroke(linewidth=8, foreground="0.1")]
# )

boxes = [FancyBboxPatch((2*i, 0), 1, 1, boxstyle="Round, pad=1")
                  for i in range(1)]

# Create patch collection with specified colour/alpha
pc = PatchCollection(boxes, facecolor="C0", lw=0.5,
                    edgecolor="0.1")

# Add collection to axes
ax.add_collection(pc)

ax.set_xticks([])
ax.set_yticks([])
ax.axis("off")
ax.margins(0.2, 0.05)
fig.tight_layout(pad=0)
fig.savefig(join(save_path, "time_short_individual"))
```
